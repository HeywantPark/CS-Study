# Java 8, 11, 17: 많이 사용되는 이유와 각 버전의 새로운 기능

## 소개
자바는 2021년 9월 **Java 17** LTS(Long Term Support) 버전을 출시했으며, 2023년 7월 기준으로 최신 버전인 Java 20까지 출시되었습니다. 하지만 여전히 **Java 8**, **Java 11**, **Java 17**이 가장 널리 사용되고 있습니다.  
[JetBrains Developer Ecosystem Survey 2022](https://www.jetbrains.com/ko-kr/lp/devecosystem-2022/java/)에 따르면, 많은 자바 개발자들이 이 세 가지 버전을 사용하는 이유는 무엇일까요?  

---

## Java 8, 11, 17이 많이 사용되는 이유

### 1. **LTS(Long Term Support) 버전**
- **LTS 버전**: 장기 지원을 제공하며, 출시 후 **8년간 보안 업데이트와 버그 수정**이 이루어집니다.
- **Non-LTS 버전**: 6개월마다 출시되며, 지원 기간이 6개월로 짧고 업데이트 내용도 제한적입니다.

### 2. **널리 사용된 이유**
- **Java 8**: 2014년 출시 후 오랜 기간 지원되었으며, 기존 시스템에서 표준으로 자리 잡았습니다.
- **Java 11**: 2018년 출시된 LTS 버전으로, 성능과 보안이 크게 향상되었습니다.
- **Java 17**: 2021년 출시된 최신 LTS 버전으로, 최신 프레임워크(예: **Spring Boot 3.0**)와의 호환성이 뛰어납니다.

---

## 버전별 주요 기능

### Java 8 (2014년 출시)
- **함수형 프로그래밍 지원**: 
  - **람다 표현식**과 **Stream API** 도입으로 함수형 스타일의 프로그래밍이 가능해짐.
- **Date and Time API**: 기존 `java.util.Date`와 `java.util.Calendar`를 대체하는 `java.time` API 제공.
- **인터페이스의 Default 메서드**: 인터페이스에 기본 구현을 제공하여 기존 코드와의 호환성을 유지.
- **Nashorn JavaScript 엔진**: 자바 애플리케이션에서 경량 JavaScript 런타임 제공.

### Java 11 (2018년 출시)
- **새로운 API 추가**:
  - `String` 메서드: `isBlank()`, `lines()`, `strip()` 등 추가.
  - 파일 처리: `Files.readString()` 및 `Files.writeString()` 지원.
- **Var를 Lambda 표현식에서 사용 가능**: 람다 파라미터에 지역 변수 구문 적용.
- **HTTP 클라이언트**: 동기 및 비동기 프로그래밍을 지원하는 현대적인 HTTP 클라이언트 도입.
- **Flight Recorder와 Mission Control**: 프로덕션 환경에서의 성능 및 디버깅 도구.
- **기능 제거**: Java EE 및 CORBA와 같은 이전에 폐기된 모듈 제거.

### Java 17 (2021년 출시)
- **새로운 언어 기능**:
  - **Sealed 클래스**: 클래스의 확장과 구현을 제한할 수 있음.
  - **switch의 패턴 매칭**(미리보기 상태).
  - 성능이 개선된 **Random** 생성기.
- **성능 향상**: 가비지 컬렉터 개선 및 JIT 최적화.
- **기능 제거**: 오래된 API와 도구 제거.
- **Spring Boot 3.0과의 호환성**: 최소 Java 17 이상 요구.

---

## Java 17로의 전환이 증가하는 이유
- **Spring Boot 3.0**: Spring Boot 3.0 릴리스 노트에 따르면, Java 17 이상을 필수로 요구합니다.
- **보안과 성능**: 이전 버전에 비해 보안 및 성능이 크게 개선되었습니다.
- **Java 8과 11의 지원 종료(EOL)**: 지원 기간이 종료되면서 기업들이 최신 LTS 버전으로 업그레이드를 진행.

---

## 어떤 버전을 선택해야 할까?
- **기존 시스템**: Java 8은 여전히 레거시 시스템에서 표준으로 사용됩니다.
- **신규 프로젝트**: Java 11 또는 17을 사용하는 것이 권장되며, 특히 Spring Boot 3.0과 같은 최신 프레임워크를 사용하는 경우 Java 17이 필수입니다.

---

## 결론
Java 8, 11, 17은 각각 LTS 버전으로 장기적인 지원을 제공하며, 개발자들에게 안정적이고 신뢰할 수 있는 환경을 제공합니다.  
특히 Java 17은 현대적인 프레임워크와의 호환성을 제공하며, 신규 프로젝트에서 가장 적합한 선택이 될 것입니다.
