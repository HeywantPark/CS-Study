# 메모리 관리: 페이징(Paging)과 세그먼테이션(Segmentation)

## 개요
다중 프로그래밍 시스템에서 다수의 프로세스를 수용하기 위해 주기억장치를 동적으로 분할하는 메모리 관리 작업이 필요합니다. 
단일 프로그램만 사용하는 것이 아니기 때문에 이를 어떻게 메모리에 적재할 것인지 고려해야 하며, 이 과정에서 페이징과 세그먼테이션과 같은 메모리 관리 기법을 활용합니다.

---

## 메모리 관리 기법

### 1. 연속 메모리 관리
- **프로그램 전체를 하나의 커다란 공간에 연속적으로 할당**해야 하는 방식입니다.
  
#### 고정 분할 기법
- 주기억장치를 고정된 파티션으로 분할
- 내부 단편화 발생

#### 동적 분할 기법
- 파티션이 동적으로 생성되며 자신의 크기와 같은 파티션에 적재
- 외부 단편화 발생


#### 단편화
- **내부 단편화**: 프로세스가 요청한 메모리보다 더 큰 공간을 할당할 때 발생하는 낭비
- **외부 단편화**: 메모리 공간 중 사용하지 못하는 작은 조각들이 발생

---

### 2. 불연속 메모리 관리
- 프로그램 일부가 서로 다른 주소 공간에 할당될 수 있는 방식으로, 단편화 문제를 해결하기 위한 기법입니다.
- 대표적으로 **페이징(Paging)**과 **세그먼테이션(Segmentation)**이 있습니다.

---

## 페이징(Paging)
- **고정 크기**의 페이지로 프로세스를 나누어 메모리에 적재하는 방식

### 구성 요소
- **페이지(page)**: 작은 고정 크기의 프로세스 조각
- **프레임(frame)**: 페이지와 동일한 크기를 가지는 물리적 메모리 조각
- **페이지 테이블**: 프로세스의 각 페이지에 해당하는 프레임 위치를 관리

### 논리 주소와 페이지 테이블
- 논리 주소는 `<page, offset>` 형태로 구성됩니다.
- 메모리 관리 장치(MMU)는 논리 주소를 물리 주소로 변환합니다.

### 페이징의 장단점
- **장점**
  - 외부 단편화 발생하지 않음
  - 메모리가 연속적이지 않아도 적재 가능
- **단점**
  - 내부 단편화 문제 발생 가능
  - 페이지 매핑 과정이 복잡해질 수 있음

---

## 세그먼테이션(Segmentation)
- **가변 크기**의 세그먼트로 프로세스를 나누어 메모리에 적재하는 방식

### 구성 요소
- **세그먼트(segment)**: 크기가 다른 논리적 블록
- **세그먼트 테이블**: 세그먼트 번호, 시작 주소(base), 한계(limit) 관리

### 논리 주소와 세그먼트 테이블
- 논리 주소는 `<segment, offset>` 형태로 구성됩니다.
- 세그먼트 번호를 통해 시작 주소와 길이를 확인합니다.

### 세그먼테이션의 장단점
- **장점**
  - 내부 단편화 문제 해소
  - 보호와 공유 기능 지원
  - 중요한 부분과 중요하지 않은 부분 분리 가능
- **단점**
  - 외부 단편화 문제 발생 가능

---

## 페이징과 세그먼테이션 비교

| 구분                     | 페이징(Paging)                                    | 세그먼테이션(Segmentation)                       |
|--------------------------|--------------------------------------------------|------------------------------------------------|
| **크기**                | 고정 크기                                         | 가변 크기                                      |
| **단편화 문제**          | 외부 단편화 없음, 내부 단편화 발생 가능           | 내부 단편화 없음, 외부 단편화 발생 가능        |
| **주소 형태**           | `<page, offset>`                                 | `<segment, offset>`                           |
| **메모리 관리 효율**     | 논리적 메모리와 물리적 메모리 매핑으로 효율적      | 논리적 단위 분리로 효율적                      |

---

## 가상 메모리 기법
- **가상 메모리 페이징**: 필요한 페이지만 로드하여 외부 단편화 문제를 해결
- **가상 메모리 세그먼테이션**: 필요한 세그먼트만 로드하여 내부 단편화 문제를 해결

| 구분                     | 가상 메모리 페이징                              | 가상 메모리 세그먼테이션                        |
|--------------------------|----------------------------------------------|----------------------------------------------|
| **로드 방식**            | 필요한 페이지만 자동으로 불러옴                 | 필요한 세그먼트만 자동으로 불러옴              |
| **단편화 문제**          | 외부 단편화 없음                              | 내부 단편화 없음                              |
| **오버헤드**             | 복잡한 메모리 관리로 인한 오버헤드 발생          | 복잡한 메모리 관리로 인한 오버헤드 발생         |

---
